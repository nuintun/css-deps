/**
 * @module @nuintun/css-deps
 * @author nuintun
 * @license MIT
 * @version 2.0.0
 * @description Transform css and get css dependences
 * @see https://nuintun.github.io/css-deps
 */
"use strict";const postcssValuesParser=require("postcss-values-parser"),postcss=require("postcss"),toString=Object.prototype.toString;function string(e){return"[object String]"===toString.call(e)}function fn(e){return"[object Function]"===toString.call(e)}function object(e){return"[object Object]"===toString.call(e)}function parseMedia(e){const t=[];if(!e.nodes.length)return t;const s=e.first.nodes;if(s.length>1){const e=s.reduce((e,s,r)=>r<1?"":"comma"===s.type?(t.push(e.trim()),""):e+s,"");t.push(e.trim())}return t}function replaceImport(e,t,s){if(t){const r=t(e.value);string(r)&&r.trim()?e.value=r:!1===r&&s.removeAll()}}function parseUrl(e,t){let s="";if(!e.nodes.length)return s;const r=e.first.nodes;if(!r.length)return s;let n=r[0];return"string"===n.type?(s=n.value,replaceImport(n,t,e)):"func"===n.type&&"url"===n.value&&(s=(n=n.nodes[1]).value,replaceImport(n,t,e)),s}function parseImport(e,t){const s=postcssValuesParser(e.params).parse(),r=parseMedia(s);return{path:parseUrl(s,t),media:r,code:s.toString()}}const PROPS=new Set(["filter","cursor","background","background-image","border-image","border-image-source","list-style","list-style-image"]);function replaceAssets(e,t,s){const r=t(e.value,s);string(r)&&r.trim()&&(e.value=r)}function parseAssets(e,t){const s=e.prop;if(t&&PROPS.has(s.replace(/^-\w+-/,""))){const r=postcssValuesParser(e.value).parse();r.walk(e=>{if("func"===e.type)switch(e.value){case"url":case"image":const r=(e=e.nodes[1]).type;"string"!==r&&"word"!==r||replaceAssets(e,t,s);break;case"image-set":e.each(e=>{if("string"===e.type){const r=e.prev().type;"comma"!==r&&"paren"!==r||replaceAssets(e,t,s)}});break;default:/\.?AlphaImageLoader$/i.test(e.value)&&e.each(e=>{const r=e.value;if("word"===e.type&&r.startsWith("src="))if("src="===r){const r=e.next();r&&"string"===r.type&&replaceAssets(r,t,s)}else{const n=t(r.slice(4),s);string(n)&&n.trim()&&(e.value=`src=${n}`)}})}}),e.value=r.toString()}}function parser(e,t,s){let r;Buffer.isBuffer(e)&&(e=e.toString());const n=[];t&&(object(t)?(s=t,t=null):fn(t)||(t=null)),s=s||{};try{r=postcss.parse(e,s.postcss)}catch(t){return{code:e,dependencies:n}}const a=fn(s.onpath)?s.onpath:null;return r.walk(e=>{switch(e.type){case"atrule":if("import"===e.name){const s=parseImport(e,t),r=s.code,a=s.path,c=s.media;n.push({path:a,media:c}),r?e.params=r:e.remove()}break;case"decl":parseAssets(e,a)}}),{code:e=r.toResult().css,dependencies:n}}module.exports=parser;