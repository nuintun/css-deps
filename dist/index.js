/**
 * @module @nuintun/css-deps
 * @author nuintun
 * @license MIT
 * @version 2.0.0
 * @description Transform css and get css dependences
 * @see https://nuintun.github.io/css-deps
 */
"use strict";const postcssValuesParser=require("postcss-values-parser"),postcss=require("postcss"),toString=Object.prototype.toString;function string(e){return"[object String]"===toString.call(e)}function fn(e){return"[object Function]"===toString.call(e)}function object(e){return"[object Object]"===toString.call(e)}function isVaildValue(e){return!(!string(e)||!e.trim())}function parseMedia(e){const s=[];if(!e.nodes.length)return s;const t=e.first.nodes;if(t.length>1){const e=t.reduce((e,t,r)=>r<1?"":"comma"===t.type?(s.push(e.trim()),""):e+t,"");s.push(e.trim())}return s}function replaceImport(e,s,t){if(s){const r=s(e.value);isVaildValue(r)?e.value=r:!1===r&&t.removeAll()}}function parseUrl(e,s){let t="";if(!e.nodes.length)return t;const r=e.first.nodes;if(!r.length)return t;let n=r[0];return"string"===n.type?(t=n.value,replaceImport(n,s,e)):"func"===n.type&&"url"===n.value&&(t=(n=n.nodes[1]).value,replaceImport(n,s,e)),t}function parseImport(e,s){const t=postcssValuesParser(e.params).parse(),r=parseMedia(t);return{path:parseUrl(t,s),media:r,code:t.toString()}}const PROPS=new Set(["filter","cursor","background","background-image","border-image","border-image-source","list-style","list-style-image"]);function replaceAssets(e,s,t){const r=s(e.value,t);isVaildValue(r)&&(e.value=r)}function isAsset(e){if(e){const s=e.type;if("string"===s||"word"===s)return!0}return!1}function parseAssets(e,s){const t=e.prop;if(s&&PROPS.has(t.replace(/^-\w+-/,""))){const r=postcssValuesParser(e.value).parse();r.walk(e=>{if("func"===e.type)switch(e.value){case"url":case"image":const r=(e=e.nodes[1]).type;"string"!==r&&"word"!==r||replaceAssets(e,s,t);break;case"image-set":e.each(e=>{if("string"===e.type){const r=e.prev().type;"comma"!==r&&"paren"!==r||replaceAssets(e,s,t)}});break;default:/\.?AlphaImageLoader$/i.test(e.value)&&e.each(e=>{const r=e.value;if("word"===e.type&&/^src(?:\s*=|$)/.test(r))if("src"===r){if(e=e.next())if("="===e.value)isAsset(e=e.next())&&replaceAssets(e,s,t);else{const n=s(r.slice(1),t);isVaildValue(n)&&(e.value=`=${n}`)}}else if("src="===r)isAsset(e=e.next())&&replaceAssets(e,s,t);else{const n=s(r.slice(4),t);isVaildValue(n)&&(e.value=`src=${n}`)}})}}),e.value=r.toString()}}function parser(e,s,t){let r;Buffer.isBuffer(e)&&(e=e.toString());const n=[];s&&object(s)&&(t=s,s=null),t=t||{};try{r=postcss.parse(e,t.postcss)}catch(s){return{code:e,dependencies:n}}s&&!fn(s)&&(s=null);const a=fn(t.onpath)?t.onpath:null;return r.walk(e=>{switch(e.type){case"atrule":if("import"===e.name){const t=parseImport(e,s),r=t.code,a=t.path,c=t.media;n.push({path:a,media:c}),r?e.params=r:e.remove()}break;case"decl":parseAssets(e,a)}}),{code:e=r.toResult().css,dependencies:n}}module.exports=parser;