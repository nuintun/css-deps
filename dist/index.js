/**
 * @module @nuintun/css-deps
 * @author nuintun
 * @license MIT
 * @version 2.0.0
 * @description Transform css and get css dependences
 * @see https://nuintun.github.io/css-deps
 */
"use strict";var postcssValuesParser=require("postcss-values-parser"),postcss=require("postcss");const toString=Object.prototype.toString;function string(e){return"[object String]"===toString.call(e)}function fn(e){return"[object Function]"===toString.call(e)}function object(e){return"[object Object]"===toString.call(e)}function parseMedia(e){const t=[];if(!e.nodes.length)return t;const s=e.nodes[0].nodes;if(s.length>1){const e=s.reduce((e,s,r)=>r<1?"":"comma"===s.type?(t.push(e.trim()),""):e+s,"");t.push(e.trim())}return t}function execReplace(e,t,s){if(e){const r=e(s.value);string(r)&&r.trim()?s.value=r:!1===r&&t.removeAll()}}function parseUrl(e,t){let s="";if(!e.nodes.length)return s;const r=e.nodes[0].nodes;if(!r.length)return s;let n=r[0];return"string"===n.type?(s=n.value,execReplace(t,e,n)):"func"===n.type&&"url"===n.value&&(s=(n=n.nodes[1]).value,execReplace(t,e,n)),s}function parseImport(e,t){const s=postcssValuesParser(e.params).parse();return{path:parseUrl(s,t),media:parseMedia(s),code:s.toString()}}function parser(e,t,s){let r;Buffer.isBuffer(e)&&(e=e.toString());const n=[];t&&(object(t)?(s=t,t=null):fn(t)||(t=null)),s=s||{};try{r=postcss.parse(e,s.postcss)}catch(t){return{code:e,dependencies:n}}const o=fn(s.onpath)?s.onpath:null;return r.walk(e=>{switch(e.type){case"atrule":if("import"===e.name){const s=parseImport(e,t),r=s.code,o=s.path,c=s.media;n.push({path:o,media:c}),r?e.params=r:e.remove()}break;case"decl":if(console.log(postcssValuesParser(e.value).parse()),o){[/url\(\s*(['"]?)([^"')]+)\1\s*\)/gi,/[(,\s]+src\s*=\s*(['"]?)([^"')]+)\1/gi].some(t=>!!t.test(e.value)&&(e.value=e.value.replace(t,(t,s,r)=>{const n=o(r,e.prop);return string(n)&&n.trim()?t.replace(r,n):t}),!0))}}}),{code:e=r.toResult().css,dependencies:n}}module.exports=parser;